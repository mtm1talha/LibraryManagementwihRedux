{"ast":null,"code":"import _classCallCheck from \"D:\\\\Work\\\\react-redux\\\\book-management-app-V1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Work\\\\react-redux\\\\book-management-app-V1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Work\\\\react-redux\\\\book-management-app-V1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Work\\\\react-redux\\\\book-management-app-V1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Work\\\\react-redux\\\\book-management-app-V1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\Work\\\\react-redux\\\\book-management-app-V1\\\\src\\\\components\\\\AllBooks\\\\AllBookComponent.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport DataState from './Data';\nimport LoadingState from './loading';\nimport ErrorState from './Error';\nimport BlankState from './BlankState';\nimport { fetchBooks, DeleteBook, EditBook } from '../../actions/index';\n\nvar BooksRecord =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BooksRecord, _Component);\n\n  function BooksRecord() {\n    _classCallCheck(this, BooksRecord);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(BooksRecord).apply(this, arguments));\n  }\n\n  _createClass(BooksRecord, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.dispatch(fetchBooks());\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          isError = _this$props.isError,\n          books = _this$props.books,\n          isFetching = _this$props.isFetching; // if (isError) {\n      //     return <ErrorState/>;\n      // }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, isError && React.createElement(ErrorState, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }), isFetching && books.length === 0 && React.createElement(LoadingState, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }), !isFetching && books.length === 0 && React.createElement(BlankState, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }), books.length > 0 && React.createElement(DataState, {\n        getbooks: books,\n        deleteBook: this.props.dispatch(DeleteBook()),\n        editBook: this.props.dispatch(EditBook()),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return BooksRecord;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    books: state.books.items,\n    loading: state.books.loading,\n    isError: state.books.error,\n    isFetching: state.books.Fetchbook\n  };\n};\n\nBooksRecord.propTypes = {\n  selectedSubreddit: PropTypes.string.isRequired,\n  posts: PropTypes.array.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  lastUpdated: PropTypes.number,\n  dispatch: PropTypes.func.isRequired\n};\nexport default connect(mapStateToProps)(BooksRecord);","map":{"version":3,"sources":["D:\\Work\\react-redux\\book-management-app-V1\\src\\components\\AllBooks\\AllBookComponent.jsx"],"names":["React","Component","connect","PropTypes","DataState","LoadingState","ErrorState","BlankState","fetchBooks","DeleteBook","EditBook","BooksRecord","props","dispatch","isError","books","isFetching","length","mapStateToProps","state","items","loading","error","Fetchbook","propTypes","selectedSubreddit","string","isRequired","posts","array","bool","lastUpdated","number","func"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,SAAP,MAAsB,QAAtB;AACA,OAAOC,YAAP,MAAyB,WAAzB;AACA,OAAOC,UAAP,MAAuB,SAAvB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,QAAjC,QAAiD,qBAAjD;;IACMC,W;;;;;;;;;;;;;wCACkB;AAChB,WAAKC,KAAL,CAAWC,QAAX,CAAoBL,UAAU,EAA9B;AACH;;;6BACQ;AAAA,wBACkC,KAAKI,KADvC;AAAA,UACGE,OADH,eACGA,OADH;AAAA,UACYC,KADZ,eACYA,KADZ;AAAA,UACmBC,UADnB,eACmBA,UADnB,EAEL;AACA;AACA;;AACA,aAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACHF,OAAO,IAAK,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADT,EAEHE,UAAU,IAAID,KAAK,CAACE,MAAN,KAAiB,CAA/B,IAAoC,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFjC,EAGH,CAACD,UAAD,IAAeD,KAAK,CAACE,MAAN,KAAiB,CAAhC,IAAqC,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHlC,EAIHF,KAAK,CAACE,MAAN,GAAe,CAAf,IACG,oBAAC,SAAD;AAAW,QAAA,QAAQ,EAAEF,KAArB;AACI,QAAA,UAAU,EAAE,KAAKH,KAAL,CAAWC,QAAX,CAAoBJ,UAAU,EAA9B,CADhB;AAEI,QAAA,QAAQ,EAAE,KAAKG,KAAL,CAAWC,QAAX,CAAoBH,QAAQ,EAA5B,CAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALA,CAAR;AAYH;;;;EArBqBT,S;;AAuB1B,IAAMiB,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,SAAK;AAC9BJ,IAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYK,KADW;AAE9BC,IAAAA,OAAO,EAAEF,KAAK,CAACJ,KAAN,CAAYM,OAFS;AAG9BP,IAAAA,OAAO,EAAEK,KAAK,CAACJ,KAAN,CAAYO,KAHS;AAI9BN,IAAAA,UAAU,EAAEG,KAAK,CAACJ,KAAN,CAAYQ;AAJM,GAAL;AAAA,CAA7B;;AAMAZ,WAAW,CAACa,SAAZ,GAAwB;AACpBC,EAAAA,iBAAiB,EAAEtB,SAAS,CAACuB,MAAV,CAAiBC,UADhB;AAEpBC,EAAAA,KAAK,EAAEzB,SAAS,CAAC0B,KAAV,CAAgBF,UAFH;AAGpBX,EAAAA,UAAU,EAAEb,SAAS,CAAC2B,IAAV,CAAeH,UAHP;AAIpBI,EAAAA,WAAW,EAAE5B,SAAS,CAAC6B,MAJH;AAKpBnB,EAAAA,QAAQ,EAAEV,SAAS,CAAC8B,IAAV,CAAeN;AALL,CAAxB;AAOA,eAAezB,OAAO,CAACgB,eAAD,CAAP,CAAyBP,WAAzB,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport DataState from './Data';\r\nimport LoadingState from './loading';\r\nimport ErrorState from './Error';\r\nimport BlankState from './BlankState';\r\nimport { fetchBooks, DeleteBook, EditBook } from '../../actions/index';\r\nclass BooksRecord extends Component {\r\n    componentDidMount() {\r\n        this.props.dispatch(fetchBooks());\r\n    }\r\n    render() {\r\n        const { isError, books, isFetching } = this.props;\r\n        // if (isError) {\r\n        //     return <ErrorState/>;\r\n        // }\r\n        return (<div>\r\n            {isError && (<ErrorState />)}\r\n            {isFetching && books.length === 0 && <LoadingState />}\r\n            {!isFetching && books.length === 0 && <BlankState />}\r\n            {books.length > 0 && (\r\n                <DataState getbooks={books}\r\n                    deleteBook={this.props.dispatch(DeleteBook())}\r\n                    editBook={this.props.dispatch(EditBook())} />\r\n                )\r\n            }\r\n\r\n        </div>);\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    books: state.books.items,\r\n    loading: state.books.loading,\r\n    isError: state.books.error,\r\n    isFetching: state.books.Fetchbook\r\n});\r\nBooksRecord.propTypes = {\r\n    selectedSubreddit: PropTypes.string.isRequired,\r\n    posts: PropTypes.array.isRequired,\r\n    isFetching: PropTypes.bool.isRequired,\r\n    lastUpdated: PropTypes.number,\r\n    dispatch: PropTypes.func.isRequired\r\n}\r\nexport default connect(mapStateToProps)(BooksRecord);"]},"metadata":{},"sourceType":"module"}