{"ast":null,"code":"import { BookRecord } from \"../API/index\";\nexport var fetchBookRecord = function fetchBookRecord() {\n  return function (dispatch) {\n    dispatch({\n      type: 'FETCH_BOOK_BEGIN'\n    });\n    var records = BookRecord;\n    return setTimeout(function () {\n      dispatch({\n        type: 'FETCH_BOOK_SUCCESS',\n        payload: records\n      });\n    }, 3000);\n  };\n};\nexport var addBook = function addBook(book) {\n  console.log(\"res\", book);\n  return {\n    type: 'ADD_BOOK',\n    payload: book\n  };\n};\nexport var UpdateBook = function UpdateBook(book) {\n  // return function(dispatch,getstate){\n  //   let updatebook=getstate.\n  // }  \n  return {\n    type: 'UPDATE_BOOK',\n    payload: book\n  };\n};\nexport var DeleteBook = function DeleteBook(id) {\n  console.log(\"delete id\", id);\n  return {\n    type: 'DELETE_BOOK',\n    id: id\n  };\n};\nexport var EditBook = function EditBook(id) {\n  console.log(\"EditBook id\", id);\n  return {\n    type: 'EDIT_BOOK',\n    id: id\n  };\n};\nexport var SearchBookTitle = function SearchBookTitle(booktitle) {\n  return {\n    type: 'SEARCH_BOOK',\n    payload: booktitle\n  };\n};\nexport var selectBook = function selectBook(book) {\n  return {\n    type: 'BOOK_SELECTED',\n    payload: book\n  };\n};\nexport var checkExistingBook = function checkExistingBook(book) {\n  return {\n    type: 'BOOKTITLE_EXIST',\n    payload: book.bookTitle\n  };\n};\nexport var DeleteAuthorBooks = function DeleteAuthorBooks(name) {\n  console.log(\"delete id\", name);\n  return {\n    type: 'DELETE_AUTHOR_BOOKS',\n    payload: name\n  };\n};\nexport var DeletePublisherBooks = function DeletePublisherBooks(name) {\n  console.log(\"delete id\", name);\n  return {\n    type: 'DELETE_PUBLISHER_BOOKS',\n    payload: name\n  };\n};","map":{"version":3,"sources":["D:\\Work\\react-redux\\book-management-app-V1\\src\\actions\\index.js"],"names":["BookRecord","fetchBookRecord","dispatch","type","records","setTimeout","payload","addBook","book","console","log","UpdateBook","DeleteBook","id","EditBook","SearchBookTitle","booktitle","selectBook","checkExistingBook","bookTitle","DeleteAuthorBooks","name","DeletePublisherBooks"],"mappings":"AAAA,SAAQA,UAAR,QAAyB,cAAzB;AAEA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AACjC,SAAO,UAAAC,QAAQ,EAAI;AACjBA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAE;AADC,KAAD,CAAR;AAGA,QAAIC,OAAO,GAAGJ,UAAd;AACA,WAAOK,UAAU,CAAC,YAAM;AACtBH,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAE,oBADC;AAEPG,QAAAA,OAAO,EAAEF;AAFF,OAAD,CAAR;AAID,KALgB,EAKd,IALc,CAAjB;AAMD,GAXD;AAYD,CAbI;AAeP,OAAO,IAAMG,OAAO,GAAC,SAARA,OAAQ,CAACC,IAAD,EAAQ;AACzBC,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,IAAnB;AACA,SAAO;AACHL,IAAAA,IAAI,EAAE,UADH;AAEHG,IAAAA,OAAO,EAAEE;AAFN,GAAP;AAIH,CANM;AAOP,OAAO,IAAMG,UAAU,GAAC,SAAXA,UAAW,CAACH,IAAD,EAAQ;AAC9B;AACA;AACA;AACE,SAAO;AACHL,IAAAA,IAAI,EAAE,aADH;AAEHG,IAAAA,OAAO,EAAEE;AAFN,GAAP;AAIH,CARM;AASP,OAAO,IAAMI,UAAU,GAAE,SAAZA,UAAY,CAACC,EAAD,EAAQ;AAC7BJ,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBG,EAAxB;AACA,SAAO;AACHV,IAAAA,IAAI,EAAE,aADH;AAEHU,IAAAA,EAAE,EAAEA;AAFD,GAAP;AAIH,CANM;AAOP,OAAO,IAAMC,QAAQ,GAAE,SAAVA,QAAU,CAACD,EAAD,EAAQ;AAC3BJ,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BG,EAA1B;AAEA,SAAO;AACHV,IAAAA,IAAI,EAAE,WADH;AAEHU,IAAAA,EAAE,EAAEA;AAFD,GAAP;AAIH,CAPM;AAQP,OAAO,IAAME,eAAe,GAAE,SAAjBA,eAAiB,CAACC,SAAD,EAAe;AACzC,SAAO;AACHb,IAAAA,IAAI,EAAE,aADH;AAEHG,IAAAA,OAAO,EAAEU;AAFN,GAAP;AAIH,CALM;AAMP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACT,IAAD,EAAU;AAChC,SAAO;AACHL,IAAAA,IAAI,EAAE,eADH;AAEHG,IAAAA,OAAO,EAAEE;AAFN,GAAP;AAIH,CALM;AAMP,OAAO,IAAMU,iBAAiB,GAAG,SAApBA,iBAAoB,CAACV,IAAD,EAAU;AACvC,SAAO;AACHL,IAAAA,IAAI,EAAE,iBADH;AAEHG,IAAAA,OAAO,EAAEE,IAAI,CAACW;AAFX,GAAP;AAIH,CALM;AAMP,OAAO,IAAMC,iBAAiB,GAAE,SAAnBA,iBAAmB,CAACC,IAAD,EAAU;AACtCZ,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBW,IAAxB;AACA,SAAO;AACHlB,IAAAA,IAAI,EAAE,qBADH;AAEHG,IAAAA,OAAO,EAAEe;AAFN,GAAP;AAIH,CANM;AAOP,OAAO,IAAMC,oBAAoB,GAAE,SAAtBA,oBAAsB,CAACD,IAAD,EAAU;AACzCZ,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBW,IAAxB;AACA,SAAO;AACHlB,IAAAA,IAAI,EAAE,wBADH;AAEHG,IAAAA,OAAO,EAAEe;AAFN,GAAP;AAIH,CANM","sourcesContent":["import {BookRecord} from \"../API/index\";\r\n\r\nexport const fetchBookRecord = () => {\r\n    return dispatch => {\r\n      dispatch({\r\n        type: 'FETCH_BOOK_BEGIN'\r\n      })\r\n      let records = BookRecord;\r\n      return setTimeout(() => {\r\n        dispatch({\r\n          type: 'FETCH_BOOK_SUCCESS',\r\n          payload: records\r\n        })\r\n      }, 3000)\r\n    }\r\n  }  \r\n\r\nexport const addBook=(book)=>{\r\n    console.log(\"res\", book)\r\n    return {\r\n        type: 'ADD_BOOK',\r\n        payload: book\r\n    }\r\n}\r\nexport const UpdateBook=(book)=>{\r\n  // return function(dispatch,getstate){\r\n  //   let updatebook=getstate.\r\n  // }  \r\n    return {\r\n        type: 'UPDATE_BOOK',\r\n        payload: book\r\n    }\r\n}\r\nexport const DeleteBook= (id) => {\r\n    console.log(\"delete id\",id)\r\n    return {\r\n        type: 'DELETE_BOOK',\r\n        id: id\r\n    }   \r\n}\r\nexport const EditBook= (id) => {\r\n    console.log(\"EditBook id\",id)\r\n\r\n    return {\r\n        type: 'EDIT_BOOK',\r\n        id: id\r\n    }   \r\n}\r\nexport const SearchBookTitle= (booktitle) => {    \r\n    return {\r\n        type: 'SEARCH_BOOK',\r\n        payload: booktitle\r\n    }   \r\n}\r\nexport const selectBook = (book) => {  \r\n    return {\r\n        type: 'BOOK_SELECTED',\r\n        payload: book\r\n    }\r\n};\r\nexport const checkExistingBook = (book) => {\r\n    return {\r\n        type: 'BOOKTITLE_EXIST',\r\n        payload: book.bookTitle\r\n    }\r\n};\r\nexport const DeleteAuthorBooks= (name) => {\r\n    console.log(\"delete id\",name)\r\n    return {\r\n        type: 'DELETE_AUTHOR_BOOKS',\r\n        payload: name\r\n    }   \r\n}\r\nexport const DeletePublisherBooks= (name) => {\r\n    console.log(\"delete id\",name)\r\n    return {\r\n        type: 'DELETE_PUBLISHER_BOOKS',\r\n        payload: name\r\n    }   \r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}